use std::fs::{create_dir_all, remove_dir};
use std::path::PathBuf;
use kuchiki::traits::TendrilSink;
use leptos::{view, IntoView};
use thiserror::Error;
use crate::extractor::{FileContent, ItemContent};

#[derive(Error, Debug)]
pub enum GenerationError {}

pub fn generate_documentation_site(directory: &PathBuf, file: &FileContent) -> Result<(), GenerationError> {
    let output_directory = directory.join("doc-site");
    remove_dir(output_directory.clone()).unwrap_or(());
    create_dir_all(output_directory.clone()).expect("Unable to create output directory");

    save_static_file(&output_directory, "style.css", include_bytes!("../design/style.css"));
    save_static_file(&output_directory, "script.js", include_bytes!("../design/script.js"));
    save_static_file(&output_directory, "Uiua386.ttf", include_bytes!("../design/Uiua386.ttf"));
    save_static_file(&output_directory, "index.html", generate_html().as_bytes());

    // extract_doc_comments(&file.items).iter()
    //     .for_each(|comment| {
    //         println!("{}", comment);
    //     });

    Ok(())
}

fn extract_doc_comments(items: &Vec<ItemContent>) -> Vec<String> {
    items.iter().filter_map(|item| {
        if let ItemContent::Words { code } = item {
            if code.starts_with("# !doc") {
                let comment = code.lines()
                    .map(|line| line.trim_start_matches("# !doc").trim_start_matches("#").trim())
                    .collect::<Vec<&str>>()
                    .join("\n")
                    .trim()
                    .to_owned();
                return Some(comment);
            }
        }
        None
    }).collect()
}

fn save_static_file(output_directory: &PathBuf, file: &str, content: &[u8]) {
    let destination = output_directory.join(file);
    std::fs::write(destination, content).expect("Unable to write static file");
}

fn generate_html() -> String {
    let raw_output = leptos::ssr::render_to_string(|| generate_page()).to_string();
    let document = kuchiki::parse_html().from_utf8().one(raw_output.as_bytes());

    // Remove comments
    document
        .inclusive_descendants()
        .filter(|node| node.as_comment().is_some())
        .for_each(|comment| {
            comment.detach()
        });

    // Remove data-hk attributes generated by leptos
    document
        .select("[data-hk]")
        .unwrap()
        .for_each(|node| {
            node.attributes.borrow_mut().remove("data-hk");
        });

    // Serialize back to string
    let mut result = Vec::new();
    document.serialize(&mut result).unwrap();
    String::from_utf8(result).unwrap()
}

fn generate_page() -> impl IntoView {
    view! {
        <!DOCTYPE html>
        <html lang="en">
            <head>
                <title>"Hello world"</title>
                <meta charset="utf-8"/>
                <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            </head>
            <body>
                "TODO: Add content here"
            </body>
        </html>
    }
}